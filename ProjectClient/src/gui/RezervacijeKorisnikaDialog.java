/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import domain.DomainObject;
import domain.Korisnik;
import domain.Rezervacija;
import gui.components.MojeRezervacijeTableModel;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import komunikacija.KomunikacijaSaServerom;
import threads.OsveziKorisnikTabeluRezervacijaNit;

/**
 *
 * @author dejanmilovanovic
 */
public class RezervacijeKorisnikaDialog extends javax.swing.JDialog {

    GlavnaKlijentskaForma parent;
    Korisnik korisnik;
    OsveziKorisnikTabeluRezervacijaNit osveziNit;

    public RezervacijeKorisnikaDialog(GlavnaKlijentskaForma parent, boolean modal, Korisnik korisnik) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        this.parent = parent;
        this.korisnik = korisnik;
        this.osveziNit = new OsveziKorisnikTabeluRezervacijaNit(this);

        try {
            srediTabelu();
            osveziNit.start();
        } catch (Exception ex) {
            Logger.getLogger(RezervacijeKorisnikaDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                dispose();
                if (osveziNit != null) {
                    osveziNit.terminate();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblMojeRezervacije = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnOtkazi = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblMojeRezervacije.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblMojeRezervacije);

        jLabel1.setText("Moje rezervacije:");

        btnOtkazi.setText("Otkazi");
        btnOtkazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtkaziActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnOtkazi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 256, Short.MAX_VALUE)
                        .addComponent(btnObrisi))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOtkazi)
                    .addComponent(btnObrisi))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOtkaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtkaziActionPerformed
        dispose();
        if (osveziNit != null) {
            osveziNit.terminate();
        }
    }//GEN-LAST:event_btnOtkaziActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        int row = tblMojeRezervacije.getSelectedRow();
        if (row != -1) {
            MojeRezervacijeTableModel tm = (MojeRezervacijeTableModel) tblMojeRezervacije.getModel();
            Rezervacija rez = (Rezervacija) tm.getRezervacije().get(row);
            try {
                boolean ret = KomunikacijaSaServerom.getInstanca().izbrisiRezervaciju(rez);
                if (ret) {
                    JOptionPane.showMessageDialog(this, "Sistem je obrisao rezervaciju!","Brisanje rezervacije",JOptionPane.INFORMATION_MESSAGE);
                    tm.izbrisiRezervaciju(rez);
                    fillTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne može da obriše rezervaciju!","Brisanje rezervacije",JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Izaberite rezervaciju koji želite da obrišete!","Brisanje rezervacije",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnOtkazi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblMojeRezervacije;
    // End of variables declaration//GEN-END:variables

    public void fillTable() throws Exception {
        LinkedList<DomainObject> rezervacije = KomunikacijaSaServerom.getInstanca().vratiRezervacije();
        MojeRezervacijeTableModel tm = (MojeRezervacijeTableModel) tblMojeRezervacije.getModel();

        LinkedList<DomainObject> mojeRezervacije = new LinkedList<>();

        for (DomainObject domainObject : rezervacije) {
            Rezervacija r = (Rezervacija) domainObject;
            if (r.getKorisnik().equals(korisnik)) {
                mojeRezervacije.add(domainObject);
            }
        }
        tm.setRezervacije(mojeRezervacije);
    }

    private void srediTabelu() {
        MojeRezervacijeTableModel tm = new MojeRezervacijeTableModel();
        tblMojeRezervacije.setModel(tm);
    }
}
